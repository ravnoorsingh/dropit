/**
 * Database Migration Script
 *
 * This script applies Drizzle migrations to your Neon PostgreSQL database.
 * Run it with: npm run db:migrate
 */

/*
Purpose:
This script is for applying database migrations (schema changes) to your Neon-hosted PostgreSQL database using Drizzle ORM.
It is meant to be run from the command line, not imported into your app code.
Typical usage: npm run db:migrate (with a corresponding script in your package.json).

*/

import { drizzle } from "drizzle-orm/neon-http";
import { migrate } from "drizzle-orm/neon-http/migrator";
import { neon } from "@neondatabase/serverless";
import * as dotenv from "dotenv";

/*
drizzle: Initializes the Drizzle ORM client for Neon‚Äôs HTTP driver.
migrate: Function to run migrations using Drizzle.
neon: Neon‚Äôs serverless Postgres driver (optimized for serverless/edge environments).
dotenv: Loads environment variables from .env.local for secure configuration.
*/

// Load environment variables from .env.local
dotenv.config({ path: ".env.local" });
/*
Loads sensitive info (like DATABASE_URL) from .env.local into process.env.
Ensures the script can connect to the correct database without hardcoding credentials.
*/

// Validate environment variables
if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL is not set in .env.local");
}

// Main migration function
async function runMigration() {
  console.log("üîÑ Starting database migration...");

  try {
    // Create a Neon SQL connection
    const sql = neon(process.env.DATABASE_URL!);

    // Initialize Drizzle with the connection
    const db = drizzle(sql);

    // Run migrations from the drizzle folder
    console.log("üìÇ Running migrations from ./drizzle folder");
    await migrate(db, { migrationsFolder: "./drizzle" });

    console.log("‚úÖ Database migration completed successfully!");
  } catch (error) {
    console.error("‚ùå Migration failed:", error);
    process.exit(1);
  }
}

/*
Step-by-Step Breakdown
console.log("üîÑ Starting database migration...");

Prints a message to indicate the migration process has started.
const sql = neon(process.env.DATABASE_URL!);

Creates a Neon SQL client using your database connection string.
const db = drizzle(sql);

Initializes the Drizzle ORM client with the Neon connection.
This client is used to run migrations and interact with the database.
await migrate(db, { migrationsFolder: "./drizzle" });

Runs all pending migrations found in the ./drizzle folder (generated by Drizzle CLI).
Applies schema changes (create tables, alter columns, etc.) to your database.
Keeps track of which migrations have been run (using the migrations table configured in drizzle.config.ts).
Success/Error Handling

On success: prints a success message.
On error: prints the error and exits the process with a failure code.
*/

// Run the migration
runMigration();

/*
Behind the Scenes & Project Integration
How does this script fit into the project?
Schema-Driven Development:
You define your database structure in lib/db/schema.ts using Drizzle‚Äôs schema API.
Migration Generation:
When you change your schema, you run Drizzle CLI commands (using drizzle.config.ts) to generate migration files in the ./drizzle folder.
Migration Application:
This script (migrate.ts) is run (e.g., via npm run db:migrate) to apply those migrations to your actual database.
Keeps DB in Sync:
Ensures your database structure matches your TypeScript schema, both locally and in production.
How does it work with other files?
drizzle.config.ts:
Used by the CLI to generate migration files based on your schema and DB connection.
lib/db/schema.ts:
The source of truth for your database structure.
lib/db/index.ts:
Used at runtime by your app to connect to the database and run queries (not for migrations).
migrate.ts:
Used only for applying migrations, not for runtime queries.

*/